buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "https://tehnut.info/maven"
        //url "http://mobiusstrip.eu/maven"
    }
    maven { // JEI
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        url "http://maven.k-4u.nl"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // OC Repo
        url "http://maven.cil.li/"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
}

version = "1.12-2.6.8"
def ENV = System.getenv()
if (ENV.DRONE_BUILD_NUMBER) {
    version += ".n" + ENV.DRONE_BUILD_NUMBER
}
version += "-SNAPSHOT"

group= "com.github.mcjty" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "mcjtylib"

sourceCompatibility = 1.8
targetCompatibility = 1.8


minecraft {
    version = "1.12.2-14.23.3.2678"
    runDir = "run"
    mappings = "snapshot_20180504"
    useDepAts = true
}

dependencies {
    deobfCompile "mezz.jei:jei_1.12.2:4.8.5.159"
    compile "li.cil.oc:OpenComputers:MC1.12.1-1.7.+:api"
    deobfCompile "cofh:RedstoneFlux:1.12-2.0.0.1:universal"
    deobfCompile "mcp.mobius.waila:Hwyla:1.8.18-B32_1.12:api"
    deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.20-12"
    //deobfCompile "com.github.mcjty:intwheel:1.1x-1.1.0"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives sourceJar
    archives deobfJar
}

jar {
    manifest {
        attributes 'FMLAT': 'mcjtylib_ng_at.cfg'
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


task("uploadJars", dependsOn: "reobf") {
    description = "uploads JARs"
    if (System.getenv("local_maven") != null) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://" + System.getenv("local_maven"))
                    pom {
                        groupId = project.group
                        version = project.version
                        artifactId = project.archivesBaseName
                        project {
                            name project.archivesBaseName
                            packaging 'jar'
                            description 'McJtyLib'
                            scm {
                                url 'https://github.com/McJty/McJtyLib'
                                connection 'scm:git:git@github.com:McJty/McJtyLib.git'
                                developerConnection 'scm:git:git@github.com:McJty/McJtyLib.git'
                            }
                            issueManagement {
                                system 'github'
                                url 'https://github.com/McJty/McJtyLib/issues'
                            }
                            licenses {
                                license {
                                    name 'MIT'
                                    distribution 'repo'
                                }
                            }
                            developers {
                                developer {
                                    id 'McJty'
                                    name 'McJty'
                                    roles { role 'developer' }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
