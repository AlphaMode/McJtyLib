plugins {
    id "fabric-loom" version "0.12-SNAPSHOT"
    id "maven-publish"
    id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
    id "org.quiltmc.quilt-mappings-on-loom" version "4.2.+" // Quilt Mappings, for parameters and javadoc. Also hashed mojmap.
    id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
}

repositories {
    maven { url 'https://mvn.devos.one/snapshots/' }
    maven { url = "https://cursemaven.com" }
    maven { url = "https://jitpack.io/" }
    maven { url = "https://maven.parchmentmc.org" }
    maven { // REI
        url "https://maven.shedaniel.me/"
    }
    maven { // Patchouli
        url "https://maven.blamejared.com"
    }
    maven { // TOP
        url "https://maven.wispforest.io"
    }
}

group= "com.github.mcjty" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "mcjtylib"

if (System.getenv('BUILD_NUMBER') != null) {
    version += ".${System.getenv('BUILD_NUMBER')}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

jar {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
        mappings loom.layered {
            it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:1.18.2+build.22:v2")) // https://lambdaurora.dev/tools/import_quilt.html
            it.parchment("org.parchmentmc.data:parchment-1.18.2:BLEEDING-20220313.132143-1@zip") // https://ldtteam.jfrog.io/ui/native/parchmentmc-public/org/parchmentmc/data/parchment-1.18.1/BLEEDING-SNAPSHOT
            it.officialMojangMappings {
                setNameSyntheticMembers(false)
            }
        }
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    if (findProject(':TheOneProbe') != null) {
        implementation project(':TheOneProbe')
    } else {
        modImplementation(project.dependencies.create("mcjty.theoneprobe:theoneprobe-fabric:${top_version}") {
            transitive = false
        })
    }
    modImplementation(include("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+${project.minecraft_version}.${project.port_lib_hash}"))
    include modApi('teamreborn:energy:2.2.0') {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}")
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
    modImplementation("vazkii.patchouli:Patchouli:${patchouli_version}") {
        transitive = false
    }
    //deobfCompile "mcp.mobius.waila:Hwyla:${waila_version}"
    //deobfCompile "cofh:RedstoneFlux:${redstoneflux_version}"
    //deobfCompile "net.darkhax.tesla:Tesla-1.12.2:1.0.63"

    //implementation "li.cil.oc:OpenComputers:${oc_version}"
    modImplementation(include("com.electronwill.night-config:core:${project.night_config_core_version}"))
    modImplementation(include("com.electronwill.night-config:toml:${project.night_config_toml_version}"))
    modImplementation(include("curse.maven:forge-config-api-port-fabric-547434:${project.config_api_version}"))
}

jar {
    manifest {
        attributes 'FMLAT': 'accesstransformer.cfg',
        "Specification-Title": "mcjtylib",
        "Specification-Vendor": "McJty",
        "Specification-Version": "1",
        "Implementation-Title": project.name,
        "Implementation-Version": "${version}",
        "Implementation-Vendor" :"McJty",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }
}

//processResources
//{
//    // this will ensure that this task is redone when the versions change.
//    inputs.property "version", project.version
//    inputs.property "mcversion", project.minecraft.version
//
//    // replace stuff in mcmod.info, nothing else
//    from(sourceSets.main.resources.srcDirs) {
//        include 'mcmod.info'
//                
//        // replace version and mcversion
//        expand 'version':project.version, 'mcversion':project.minecraft.version
//    }
//        
//    // copy everything else, thats not the mcmod.info
//    from(sourceSets.main.resources.srcDirs) {
//        exclude 'mcmod.info'
//    }
//}

task apiJar(type: Jar) {
    classifier = "api"
    from(sourceSets.main.output) {
        include "mcjty/mcjtylib/api/**"
    }
}

artifacts {
    archives apiJar
}

publishing {
    publications.create('mavenJava', MavenPublication) {
        from components.java
        artifact apiJar

        artifactId = project.archivesBaseName
        pom {
            name = 'McJtyLib'
            description = 'Base mod for all McJty tech mods'
            scm {
                url = 'https://github.com/McJtyMods/McJtyLib'
                connection = 'scm:git:git@github.com:McJtyMods/McJtyLib.git'
                developerConnection = 'scm:git:git@github.com:McJtyMods/McJtyLib.git'
            }
            issueManagement {
                system = 'github'
                url = 'https://github.com/McJtyMods/McJtyLib/issues'
            }
            licenses {
                license {
                    name = 'MIT'
                    distribution = 'repo'
                }
            }
            developers {
                developer {
                    id = 'McJty'
                    name = 'McJty'
                    roles = ['developer']
                }
            }
        }
    }
    repositories {
        if (System.getenv('local_maven') != null) {
            maven {
                name = 'local'
                url = 'file://' + System.getenv('local_maven')
            }
        }
    }
}


//task("uploadJars", dependsOn: "reobf") {
//    description = "uploads JARs"
//    if (System.getenv("local_maven") != null) {
//        apply plugin: 'maven'
//        uploadArchives {
//            repositories {
//                mavenDeployer {
//                    repository(url: "file://" + System.getenv("local_maven"))
//                    pom {
//                        groupId = project.group
//                        version = project.version
//                        artifactId = project.archivesBaseName
//                        project {
//                            name project.archivesBaseName
//                            packaging 'jar'
//                            description 'McJtyLib'
//                            scm {
//                                url 'https://github.com/McJtyMods/McJtyLib'
//                                connection 'scm:git:git@github.com:McJtyMods/McJtyLib.git'
//                                developerConnection 'scm:git:git@github.com:McJtyMods/McJtyLib.git'
//                            }
//                            issueManagement {
//                                system 'github'
//                                url 'https://github.com/McJtyMods/McJtyLib/issues'
//                            }
//                            licenses {
//                                license {
//                                    name 'MIT'
//                                    distribution 'repo'
//                                }
//                            }
//                            developers {
//                                developer {
//                                    id 'McJty'
//                                    name 'McJty'
//                                    roles { role 'developer' }
//                                }
//                            }
//                        }
//                    }
//                }
//            }
//        }
//    }
//}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${modname} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

//tasks.curseforge.enabled = project.hasProperty('curseforge_key')

//curseforge {
//    if (project.hasProperty('curseforge_key')) {
//        apiKey = project.curseforge_key
//    }
//
//    project {
//        id = project.projectId
//        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
//        changelogType = 'html'
//        releaseType = project.curse_type
//        addGameVersion project.minecraft_version
//        mainArtifact(jar) {
//            displayName = "${modname} - ${version}"
//        }
//        relations {
//            optionalLibrary 'redstone-flux'
//            optionalLibrary 'the-one-probe'
//        }
//    }
//}

